{"version":3,"file":"minimal-browser-event-emitter.js","mappings":"AACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,sBCQnE,MAAMI,UAAqBC,YAQzC,EAAAC,CAAGC,EAAWC,GACb,IAAIC,EAAkBC,IACrBF,EAASG,MAAMC,KAAMF,EAAMG,OAAM,EAElCL,EAASC,eAAiBA,EAC1BG,KAAKE,iBAAiBP,EAAWE,EAClC,CASA,IAAAM,CAAKR,KAAcS,GAClBJ,KAAKK,cAAc,IAAIC,YAAYX,EAAW,CAC7CM,OAAQG,IAEV,CAOA,cAAAG,CAAeZ,EAAWC,GACzBA,EAAWA,EAASC,gBAAkBD,EACtCI,KAAKQ,oBAAoBb,EAAWC,EACrC,E","sources":["webpack://@webhandle/minimal-browser-event-emitter/webpack/bootstrap","webpack://@webhandle/minimal-browser-event-emitter/webpack/runtime/define property getters","webpack://@webhandle/minimal-browser-event-emitter/webpack/runtime/hasOwnProperty shorthand","webpack://@webhandle/minimal-browser-event-emitter/./client-js/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\n * Add this most basic of the EventEmitter functions (on, emit, removeListener) to the browser's\n * EventTarget functionality.\n * \n * The eventEmitter.emit() method allows an arbitrary set of arguments to be passed to the listener \n * functions. Keep in mind that when an ordinary listener function is called, the standard this \n * keyword is intentionally set to reference the EventEmitter instance to which the listener is attached.\n */\nexport default class EventEmitter extends EventTarget {\n\t/**\n\t * Adds the listener function to the end of the listeners array for the event named eventName. No checks \n\t * are made to see if the listener has already been added. Multiple calls passing the same combination \n\t * of eventName and listener will result in the listener being added, and called, multiple times.\n\t * @param {string} eventName The event type name\n\t * @param {*} listener The listener function where has arbitrary arguments\n\t */\n\ton(eventName, listener) {\n\t\tlet nativeListener = (event) => {\n\t\t\tlistener.apply(this, event.detail)\n\t\t}\n\t\tlistener.nativeListener = nativeListener\n\t\tthis.addEventListener(eventName, nativeListener)\n\t}\n\n\t/**\n\t * Synchronously calls each of the listeners registered for the event named eventName, in the order \n\t * they were registered, passing the supplied arguments to each.\n\t * \n\t * @param {string} eventName The event type name\n\t * @param  {...any} args \n\t */\n\temit(eventName, ...args) {\n\t\tthis.dispatchEvent(new CustomEvent(eventName, {\n\t\t\tdetail: args\n\t\t}))\n\t}\n\n\t/**\n\t * Removes the specified listener from the listener array for the event named eventName.\n\t * @param {string} eventName The event type name\n\t * @param {function} listener The listener function\n\t */\n\tremoveListener(eventName, listener) {\n\t\tlistener = listener.nativeListener || listener\n\t\tthis.removeEventListener(eventName, listener)\n\t}\n\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","EventEmitter","EventTarget","on","eventName","listener","nativeListener","event","apply","this","detail","addEventListener","emit","args","dispatchEvent","CustomEvent","removeListener","removeEventListener"],"sourceRoot":""}